{if (left >= right) return;
    int pivot = vec[left];
    int i = left, j = right;
    while (i < j) {
        while (i < j && vec[j] >= pivot) j--;
        if (i < j) vec[i++] = vec[j];
        while (i < j && vec[i] < pivot) i++;
        if (i < j) vec[j--] = vec[i];
    }
    vec[i] = pivot;
    quick_sort(vec, left, i - 1);
    quick_sort(vec, i + 1, right);
---
int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];
    for (int i = 0; i < n1; i++)
        L[i] = a[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = a[m + 1 + j];
    int i = 0;
    int j = 0;
    int k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            a[k] = L[i];
            i++;
        }
        else
        {
            a[k] = R[j];
            j++;
            count ++;
        }
        k++;
    }
    while (i < n1)
    {
        a[k] = L[i];
        i++;
        k++;
    }
    while (j < n2)
    {
        a[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(vector<int> &a, int l, int r, int &count)
{
    if (l < r)
    {
        int m = l + (r - l) / 2;
        mergeSort(a, l, m, count);
        mergeSort(a, m + 1, r, count);
        merge(a, l, m, r, count);
    }
}    