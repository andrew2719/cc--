--obst--

// optimal binary search
#include <stdio.h>
struct mat
{
    int w, c, r;
};
int arr[100], n;
struct mat a[100][100];
int mind(int arr[], int size)
{
    int minIndex = 0;
    for (int i = 1; i < size; i++)
    {
        if (arr[i] < arr[minIndex])
        {
            minIndex = i;
        }
    }
    return minIndex;
}
int print(struct mat a[][100], int i, int j)
{
    printf("Left child of %d is :: %d\n", a[i][j].r, a[i][a[i][j].r - 1].r);
    printf("Right child of %d is :: %d\n", a[i][j].r, a[a[i][j].r][j].r);
    if (a[i][a[i][j].r - 1].r != 0)
    {
        print(a, i, a[i][j].r - 1);
    }
    if (a[a[i][j].r][j].r != 0)
    {
        print(a, a[i][j].r, j);
    }
}
int main()
{
    int i, j, k;
    scanf("%d", &n);
    int b[n], c[n + 1];
    for (i = 0; i < n; i++)
    {
        scanf("%d", &b[i]);
    }
    for (i = 0; i <= n; i++)
    {
        scanf("%d", &c[i]);
    }
    int l = n;
    //struct mat a[n + 1][n + 1];
    for (int d = 0; d <= n; d++)
    {
        for (i = 0; i <= n; i++)
        {
            j = i + d;
            if (j <= n)
            {
                if (i == j)
                {
                    a[i][j].w = c[i];
                    a[i][j].c = 0;
                    a[i][j].r = 0;
                }
                else
                {
                    a[i][j].w = a[i][j - 1].w + b[j - 1] + c[j];
                    int n1 = (i - j), k = 0;
                    for (int n2 = i + 1; n2 <= j; n2++)
                    {
                        arr[k++] = a[i][n2 - 1].c + a[n2][j].c;
                    }
                    //printf("\n");
                    a[i][j].c = arr[mind(arr, k)] + a[i][j].w;
                    a[i][j].r = mind(arr, k) + i + 1;
                }
            }
        }
    }
    printf("Optimal BST is :: w values are:\n");
    for (int diff = 0; diff <= n; diff++)
    {
        for (i = 0; i <= n; i++)
        {
            j = i + diff;
            if (j <= n)
            {
                printf("%d ", a[i][j].w);
            }
        }
        printf("\n");
    }
    printf("c values are:\n");
    for (int diff = 0; diff <= n; diff++)
    {
        for (i = 0; i <= n; i++)
        {
            j = i + diff;
            if (j <= n)
            {
                printf("%d ", a[i][j].c);
            }
        }
        printf("\n");
    }
    printf("r values are:\n");
    int x, y;
    for (int diff = 0; diff <= n; diff++)
    {
        for (i = 0; i <= n; i++)
        {
            j = i + diff;
            if (j <= n)
            {
                printf("%d ", a[i][j].r);
                x = i;
                y = j;
            }
        }
        printf("\n");
    }
    printf("Root is %d\n", a[x][y].r);
    print(a, x, y);
}

-- matrix chain multiplication

// matrix chain multiplication//
#include <stdio.h>
#include <limits.h>

#define MAX_SIZE 100

// Function to calculate the minimum number of scalar multiplications needed
// to compute the product of a chain of matrices
void matrixChainOrder(int p[], int n, int cost[MAX_SIZE][MAX_SIZE], int sequence[MAX_SIZE][MAX_SIZE])
{
    int i, j, k, L, q;

    // cost[i][j] represents the minimum number of scalar multiplications needed
    // to compute the product of matrices AiAi+1...Aj
    for (i = 1; i <= n; i++)
    {
        cost[i][i] = 0;
    }

    for (L = 2; L <= n; L++)
    {
        for (i = 1; i <= n - L + 1; i++)
        {
            j = i + L - 1;
            cost[i][j] = INT_MAX;
            for (k = i; k <= j - 1; k++)
            {
                q = cost[i][k] + cost[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (q < cost[i][j])
                {
                    cost[i][j] = q;
                    sequence[i][j] = k;
                }
            }
        }
    }
}

// Function to print the optimal parenthesization of matrices in a chain
void printOptimalParenthesis(int sequence[MAX_SIZE][MAX_SIZE], int i, int j)
{
    if (i == j)
    {
        printf("a%d", i);
    }
    else
    {
        printf("(");
        printOptimalParenthesis(sequence, i, sequence[i][j]);
        printOptimalParenthesis(sequence, sequence[i][j] + 1, j);
        printf(")");
    }
}

int main()
{
    int n, p[MAX_SIZE], cost[MAX_SIZE][MAX_SIZE], sequence[MAX_SIZE][MAX_SIZE], i, j;

    scanf("%d", &n);

    for (i = 0; i <= n; i++)
    {
        scanf("%d", &p[i]);
    }

    matrixChainOrder(p, n, cost, sequence);

    printf("cost matrix:\n");
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            printf("%d ", cost[i][j]);
        }
        printf("\n");
    }

    printf("sequence matrix:\n");
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            printf("%d ", sequence[i][j]);
        }
        printf("\n");
    }

    printf("Optimal ordering is: ");
    printOptimalParenthesis(sequence, 1, n);
    printf("\n");

    printf("cost of matrix chain multiplication: %d\n", cost[1][n]);

    return 0;
}

----0/1 knapsack---
// C++ Program to implement 0/1
// knapsack using LC Branch and Bound

#include <bits/stdc++.h>
using namespace std;

// Stores the number of items
int size;

// Stores the knapsack capacity
float capacity;

typedef struct Item {

	// Stores the weight of items
	float weight;

	// Stores the value of items
	int value;

	// Stores the index of items
	int idx;
} Item;

typedef struct Node {

	// Upper Bound: Best case
	// (Fractional Knapsack)
	float ub;

	// Lower Bound: Worst case (0/1)
	float lb;

	// Level of the node
	// in the decision tree
	int level;

	// Stores if the current item is
	// selected or not
	bool flag;

	// Total Value: Stores the sum of the
	// values of the items included
	float tv;

	// Total Weight: Stores the sum of the
	// weights of the items included
	float tw;
} Node;

// Function to calculate upper bound
// (includes fractional part of the items)
float upper_bound(float tv, float tw,
				int idx, vector<Item>& arr)
{
	float value = tv;
	float weight = tw;
	for (int i = idx; i < size; i++) {
		if (weight + arr[i].weight
			<= capacity) {
			weight += arr[i].weight;
			value -= arr[i].value;
		}
		else {
			value -= (float)(capacity
							- weight)
					/ arr[i].weight
					* arr[i].value;
			break;
		}
	}
	return value;
}

// Function to calculate lower bound (doesn't
// include fractional part of the items)
float lower_bound(float tv, float tw,
				int idx, vector<Item>& arr)
{
	float value = tv;
	float weight = tw;
	for (int i = idx; i < size; i++) {
		if (weight + arr[i].weight
			<= capacity) {
			weight += arr[i].weight;
			value -= arr[i].value;
		}
		else {
			break;
		}
	}
	return value;
}

class comp {
public:
	bool operator()(Node a, Node b)
	{
		return a.lb > b.lb;
	}
};

void assign(Node& a, float ub, float lb,
			int level, bool flag,
			float tv, float tw)
{
	a.ub = ub;
	a.lb = lb;
	a.level = level;
	a.flag = flag;
	a.tv = tv;
	a.tw = tw;
}

void knapsack(vector<Item>& arr)
{

	// Sort the items based on the
	// profit/weight ratio
	sort(arr.begin(), arr.end(),
		[&](Item& a, Item& b) {
			return a.value / a.weight
					> b.value / b.weight;
		});

	// min_lb -> Minimum lower bound
	// of all the nodes explored

	// final_lb -> Minimum lower bound
	// of all the paths that reached
	// the final level
	float min_lb = 0, final_lb = INT_MAX;

	// curr_path -> Boolean array to store
	// at every index if the element is
	// included or not

	// final_path -> Boolean array to store
	// the result of selection array when
	// it reached the last level
	bool curr_path[size], final_path[size];

	// Priority queue to store the nodes
	// based on lower bounds
	priority_queue<Node, vector<Node>,
				comp>
		pq;

	Node current, left, right;
	current.lb = current.ub = current.tw
		= current.tv = current.level
		= current.flag = 0;

	// Insert a dummy node
	pq.push(current);

	for (int i = 0; i < size; i++)
		curr_path[i] = final_path[i]
			= false;

	while (!pq.empty()) {
		current = pq.top();
		pq.pop();

		if (current.ub > min_lb
			|| current.ub >= final_lb) {

			// If the current node's best case
			// value is not optimal than min_lb,
			// then there is no reason to explore
			// that path including final_lb
			// eliminates all those paths whose
			// best values is equal to final_lb
			continue;
		}

		// update the path
		if (current.level != 0)
			curr_path[current.level - 1]
				= current.flag;

		if (current.level == size) {
			// Reached last level
			if (current.lb < final_lb)
				for (int i = 0; i < size; i++)
					final_path[arr[i].idx]
						= curr_path[i];
			final_lb = min(current.lb, final_lb);
			continue;
		}

		int level = current.level;

		// right node -> Excludes current item
		// Hence, cp, cw will obtain the value
		// of that of parent
		assign(right,
			upper_bound(current.tv,
						current.tw, level + 1,
						arr),
			lower_bound(current.tv, current.tw,
						level + 1, arr),
			level + 1, false,
			current.tv, current.tw);

		// Check whether adding the current
		// item will not exceed the knapsack weight
		if (current.tw + arr[current.level].weight
			<= capacity) {

			// left node -> includes current item
			// c and lb should be calculated
			// including the current item.
			left.ub
				= upper_bound(
					current.tv
						- arr[level].value,
					current.tw
						+ arr[level].weight,
					level + 1, arr);

			left.lb
				= lower_bound(
					current.tv
						- arr[level].value,
					current.tw
						+ arr[level].weight,
					level + 1, arr);

			assign(left, left.ub, left.lb,
				level + 1, true,
				current.tv - arr[level].value,
				current.tw
					+ arr[level].weight);
		}

		// If Left node cannot be inserted
		else {

			// Stop the left node from
			// getting added to the
			// priority queue
			left.ub = left.lb = 1;
		}

		// Update the lower bound
		min_lb = min(min_lb, left.lb);
		min_lb = min(min_lb, right.lb);

		// Exploring nodes whose
		// upper bound is greater than
		// min_lb will never give
		// the optimal result

		if (min_lb >= left.ub)
			pq.push(left);
		if (min_lb >= right.ub)
			pq.push(right);
	}

	cout << "Items taken into the"
		<< " knapsack are : \n";
	if (final_lb == INT_MAX)
		final_lb = 0;
	for (int i = 0; i < size; i++)
		cout << final_path[i] << " ";
	cout << "\n";
	cout << "Maximum profit is : "
		<< (-final_lb) << "\n";
}

// Driver Code
int main()
{
	size = 4;

	capacity = 15;

	vector<Item> arr;
	arr.push_back({ 2, 10, 0 });
	arr.push_back({ 4, 10, 1 });
	arr.push_back({ 6, 12, 2 });
	arr.push_back({ 9, 18, 3 });

	knapsack(arr);

	return 0;
}
