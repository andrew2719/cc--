--obst--

// optimal binary search
#include <stdio.h>
struct mat
{
    int w, c, r;
};
int arr[100], n;
struct mat a[100][100];
int mind(int arr[], int size)
{
    int minIndex = 0;
    for (int i = 1; i < size; i++)
    {
        if (arr[i] < arr[minIndex])
        {
            minIndex = i;
        }
    }
    return minIndex;
}
int print(struct mat a[][100], int i, int j)
{
    printf("Left child of %d is :: %d\n", a[i][j].r, a[i][a[i][j].r - 1].r);
    printf("Right child of %d is :: %d\n", a[i][j].r, a[a[i][j].r][j].r);
    if (a[i][a[i][j].r - 1].r != 0)
    {
        print(a, i, a[i][j].r - 1);
    }
    if (a[a[i][j].r][j].r != 0)
    {
        print(a, a[i][j].r, j);
    }
}
int main()
{
    int i, j, k;
    scanf("%d", &n);
    int b[n], c[n + 1];
    for (i = 0; i < n; i++)
    {
        scanf("%d", &b[i]);
    }
    for (i = 0; i <= n; i++)
    {
        scanf("%d", &c[i]);
    }
    int l = n;
    //struct mat a[n + 1][n + 1];
    for (int d = 0; d <= n; d++)
    {
        for (i = 0; i <= n; i++)
        {
            j = i + d;
            if (j <= n)
            {
                if (i == j)
                {
                    a[i][j].w = c[i];
                    a[i][j].c = 0;
                    a[i][j].r = 0;
                }
                else
                {
                    a[i][j].w = a[i][j - 1].w + b[j - 1] + c[j];
                    int n1 = (i - j), k = 0;
                    for (int n2 = i + 1; n2 <= j; n2++)
                    {
                        arr[k++] = a[i][n2 - 1].c + a[n2][j].c;
                    }
                    //printf("\n");
                    a[i][j].c = arr[mind(arr, k)] + a[i][j].w;
                    a[i][j].r = mind(arr, k) + i + 1;
                }
            }
        }
    }
    printf("Optimal BST is :: w values are:\n");
    for (int diff = 0; diff <= n; diff++)
    {
        for (i = 0; i <= n; i++)
        {
            j = i + diff;
            if (j <= n)
            {
                printf("%d ", a[i][j].w);
            }
        }
        printf("\n");
    }
    printf("c values are:\n");
    for (int diff = 0; diff <= n; diff++)
    {
        for (i = 0; i <= n; i++)
        {
            j = i + diff;
            if (j <= n)
            {
                printf("%d ", a[i][j].c);
            }
        }
        printf("\n");
    }
    printf("r values are:\n");
    int x, y;
    for (int diff = 0; diff <= n; diff++)
    {
        for (i = 0; i <= n; i++)
        {
            j = i + diff;
            if (j <= n)
            {
                printf("%d ", a[i][j].r);
                x = i;
                y = j;
            }
        }
        printf("\n");
    }
    printf("Root is %d\n", a[x][y].r);
    print(a, x, y);
}

-- matrix chain multiplication

// matrix chain multiplication//
#include <stdio.h>
#include <limits.h>

#define MAX_SIZE 100

// Function to calculate the minimum number of scalar multiplications needed
// to compute the product of a chain of matrices
void matrixChainOrder(int p[], int n, int cost[MAX_SIZE][MAX_SIZE], int sequence[MAX_SIZE][MAX_SIZE])
{
    int i, j, k, L, q;

    // cost[i][j] represents the minimum number of scalar multiplications needed
    // to compute the product of matrices AiAi+1...Aj
    for (i = 1; i <= n; i++)
    {
        cost[i][i] = 0;
    }

    for (L = 2; L <= n; L++)
    {
        for (i = 1; i <= n - L + 1; i++)
        {
            j = i + L - 1;
            cost[i][j] = INT_MAX;
            for (k = i; k <= j - 1; k++)
            {
                q = cost[i][k] + cost[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (q < cost[i][j])
                {
                    cost[i][j] = q;
                    sequence[i][j] = k;
                }
            }
        }
    }
}

// Function to print the optimal parenthesization of matrices in a chain
void printOptimalParenthesis(int sequence[MAX_SIZE][MAX_SIZE], int i, int j)
{
    if (i == j)
    {
        printf("a%d", i);
    }
    else
    {
        printf("(");
        printOptimalParenthesis(sequence, i, sequence[i][j]);
        printOptimalParenthesis(sequence, sequence[i][j] + 1, j);
        printf(")");
    }
}

int main()
{
    int n, p[MAX_SIZE], cost[MAX_SIZE][MAX_SIZE], sequence[MAX_SIZE][MAX_SIZE], i, j;

    scanf("%d", &n);

    for (i = 0; i <= n; i++)
    {
        scanf("%d", &p[i]);
    }

    matrixChainOrder(p, n, cost, sequence);

    printf("cost matrix:\n");
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            printf("%d ", cost[i][j]);
        }
        printf("\n");
    }

    printf("sequence matrix:\n");
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            printf("%d ", sequence[i][j]);
        }
        printf("\n");
    }

    printf("Optimal ordering is: ");
    printOptimalParenthesis(sequence, 1, n);
    printf("\n");

    printf("cost of matrix chain multiplication: %d\n", cost[1][n]);

    return 0;
}